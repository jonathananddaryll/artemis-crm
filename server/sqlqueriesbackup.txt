// Create TIMELINE table
CREATE TABLE timeline(
  id SERIAL PRIMARY KEY,
  update_type varchar(50),
  description varchar(150),
  date_created TIMESTAMP DEFAULT NOW(),,
  job_id INT,
  FOREIGN KEY(job_id) REFERENCES job(id)
  ON DELETE CASCADE
);


// Delete BOARD 
DELETE FROM board 
WHERE id = 6 AND NOT EXISTS
  (SELECT *
   FROM job
   WHERE board.id = job.board_id)


// Create USER
CREATE TABLE user(
  id SERIAL PRIMARY KEY,
  user_id varchar(255) NOT NULL,
  date_created TIMESTAMP DEFAULT NOW(),
);

// Create BOARD
CREATE TABLE board(
  id SERIAL PRIMARY KEY,
  title varchar(255) NOT NULL,
  user_id int NOT NULL,
  column1 varchar(255) DEFAULT 'wishlist',
  column2 varchar(255) DEFAULT 'applied',
  column3 varchar(255) DEFAULT 'screening',
  column4 varchar(255) DEFAULT 'interview',
  column5 varchar(255) DEFAULT 'offer',
  column6 varchar(255) DEFAULT 'rejected',
  column7 varchar(255),
  column8 varchar(255),
  column9 varchar(255),
  column10 varchar(255),
  total_cols int DEFAULT 6,
  date_created TIMESTAMP DEFAULT NOW(),
);

// Create JOB
CREATE TABLE job(
  id SERIAL PRIMARY KEY,
  job_url varchar(150),
  job_title varchar(50) NOT NULL,
  company varchar(50) NOT NULL,
  status varchar(50) NOT NULL,
  location varchar(50) NOT NULL,
  board_id int NOT NULL,
  main_contact int DEFAULT NULL,
  rate_of_pay int DEFAULT NULL,
  description text DEFAULT NULL,
  date_created TIMESTAMP DEFAULT NOW(),
);

CREATE TABLE note(
  id SERIAL PRIMARY KEY,
  text TEXT,
  date_created TIMESTAMP DEFAULT NOW(),
  job_id INT,
  FOREIGN KEY(job_id) REFERENCES job(id)
  ON DELETE CASCADE
);

// Create TASK
CREATE TABLE task(
  id SERIAL PRIMARY KEY,
  name VARCHAR(255),
  is_done BOOLEAN DEFAULT false,
  date_created TIMESTAMP DEFAULT NOW(),
  job_id INT,
  FOREIGN KEY(job_id) REFERENCES job(id)
  ON DELETE CASCADE
);


// Join Table get every job that has a task to do
SELECT * FROM job JOIN task ON job.id = task.job_id WHERE board_id = 1 AND task.is_done = false

@todo for 